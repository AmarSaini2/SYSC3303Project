@startuml

skinparam linetype ortho

class FireIncident {
    - DatagramSocket socket
    - InetAddress schedulerAddress
    - String eventFilePath <<final>>
    - String zoneFilePath <<final>>
    - GenericQueue<Event> sharedFireQueue
    - HashMap<Integer, Event> events
    - HashMap<Integer, Zone> zones
    - HashMap<Integer, DroneResponse> droneResponses
    - int schedulerPort
    + FireIncident(String, String, int)
    + void updateEvents(Event)
    + HashMap<Integer, Zone> getZones()
    + HashMap<Integer, Event> getEvents()
    + void run()
    # void readZoneFile()
    # void readEventFile()
    - sendToScheduler(Event)
    - sendToScheduler(String)
    - receiveResponse
    
}

interface Comparable{}

interface Serializable{}

class Event {
    - int id
    - static int counter
    - Zone zone
    - ArrayList<Object[]> assignedDrones
    - Type type
    - LocalTime time
    - Severity severity
    - {static} long serialVersionID <<final>>
    + enum Type {FIRE_DETECTED, DRONE_REQUEST}
    + enum Severity {HIGH, MODERATE, LOW, OUT}
    + Event(LocalTime, Zone, Type, Severity)
    + Severity getSeverity()
    + addAssignedDrone(Object[])
    + removeAssignedDrone(Object[])
    + ArrayList<Object[]> getAssignedDrones
    + String toString()
    + int compareTo(Event)
    + byte[] serializeEvent()
    + Event deserializeEvent()
    + Type getType()
    + LocalTime getTime()
    + Zone getZone()
    + int getId()
    + void setTime(LocalTime)
    + void setSeverity(Severity)
}

class Zone {
    - int id
    - int startX
    - int startY
    - int endX
    - int endY
    + Zone(int, int, int, int, int)
    + int getId()
    + int getStartX()
    + int getStartY()
}

class GenericQueue<T> {
    - Queue<T> queue
    + GenericQueue()
    + void add(T item)
    + T get() throws InterruptedException
    + T getNonBlocking()
    + int size()
    + boolean isEmpty()
}

class DroneResponse {
    - Event event <<final>>
    - int droneId <<final>>
    - ResponseType responseType <<final>>
    + enum ResponseType { SUCCESS, FAILURE, TIMEOUT, REFILL_REQUIRED }
    + DroneResponse(Event, int, ResponseType)
    + Event getEvent()
    + int getDroneId()
    + ResponseType getResponseType()
    + String toString
    + byte[] serializeResponse()
    + {static} DroneResponse deserializeResponse
}

class Thread{}

class Drone {
    - static int idCounter
    - int id
    - Event assignedFire
    - HashMap<String, Double> attributes <<final>>
    - double carryingVolume
    - Random random <<final>>
    - boolean hasAssignment
    - Random random
    - DroneState state
    - DatagramSocket socket
    - InetAddress schedulerAddress 
    - int schedulerPort
    - boolean finish
    
    + Drone(int)
    + setState(String)
    + String getStateAsString()
    + boolean hasAssignment()
    + assignFire(Event) <<synchronized>>
    + run()
    + boolean isFree()
    + sleepMode()
    + travelToFire()
    + extinguishFire()
    + returnToBase()
    + refillTank()
    + handleFault()
    + handleSuccess()
    + String toString()
    + Event getAssignedFire()
    + DatagramSocket getSocket()
    # sendWakeupMessage()
    # checkMessage()
    - int getExtinguishTime(int)
    - int getRequiredVolume(Event)
    - int getTravelTime(Event)
    - sendResponse(DroneResponse.ResponseType)
    
    + {static} main(String)
}

class DroneFSM {
    + Map<DroneState, StateTransition> stateTable <<final>>
    + void initialize(Drone)
    + DroneState getState(String)
}

class Scheduler {
    - DatagramSocket fireIncidentSocket
    - DatagramSocket droneSocket
    - InetAddress fireIncidentAddress
    - int fireIncidentPort
    - PriorityBlockingQueue<Event> eventQueue
    - CopyOnWriteArrayList<Object[]> freeDroneList
    - CopyOnWriteArrayList<Object[]> allDroneList
    - boolean finish
    - boolean freeDoneListInUse
    
    - handleFireIncident()
    - sendToDrone(Event, int, InetAddress)
    - sendToDrone(String, int, InetAddress)
    - void monitorDroneResponses()
    - finishDrones()
    + Scheduler(int, int)
    + void run()
    + void finishEvents() <<synchronized>>
    
    + {static} main(String[])
}

interface DroneState{
  + void goNextState(Drone)
  + void action(Drone)
  + String getStateString()
  + void handleFault(Drone)
}

class DroneIdle{
}
class DroneEnRoute{
}
class DroneDroppingAgent{
}
class DroneReturningToBase{
}
class DroneFillingTank{
}
class DroneSuccess{
}
class DroneFault{
}

FireIncident --> Event : creates
FireIncident --> Zone : reads
DroneResponse --> Event : reads
Drone --|> Thread : extends
Event --|> Zone : contains
Scheduler --> Drone : manages
Scheduler --> Thread : extends
Drone --|> GenericQueue : uses
Drone --|> DroneFSM : uses
Drone --> DroneResponse : uses
DroneFSM --> DroneState : uses
GenericQueue --|> Event : processes
GenericQueue --|> DroneResponse : processes
Event ..|> Comparable : implements
Event ..|> Serializable : implements
DroneIdle ..|> DroneState : implements
DroneEnRoute ..|> DroneState : implements
DroneDroppingAgent ..|> DroneState : implements
DroneReturningToBase ..|> DroneState : implements
DroneFillingTank ..|> DroneState : implements
DroneSuccess ..|> DroneState : implements
DroneFault ..|> DroneState : implements

@enduml